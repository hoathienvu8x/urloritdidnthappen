/**
 * Stylesheet for the editor.
 *
 * Author: ccalo@google.com (Chris Calo)
 */

html {
  font-family: Arial, sans-serif;
  font-size: 0.8125em;
  line-height: 1.230769em; /* 16px */
}

body,
form {
  margin: 0;
  padding: 0;
}

ol, ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

a {
  color: #fff !important;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

.editor-chrome {
  -webkit-box-orient: vertical;
  display: -webkit-box;
  bottom: 0;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
}

.editor-chrome-header {
  overflow: hidden;
  -webkit-box-flex: 0;
  background: #999;
  color: #fff;
  font-weight: bold;
  padding: 0.25em 0.5em;
}

.editor-chrome-header h1 {
  line-height: 1.7em;
  display: inline;
  font-size: 100%;
}

.editor-chrome-header h1 a {
  text-decoration: none;
  color: inherit;
}

.editor-chrome-header h1 a:hover {
  text-decoration: underline;
}

.editor-chrome-header-links {
  float: right;
  white-space: nowrap;
  xwidth: 50%;
  text-align: right;
}

.editor-chrome-header-links form {
  display: inline-block;
}

.editor-content {
  -webkit-box-flex: 1;
  position: relative;
}

.editor-bespin {
  width: 100%;
  height: 100%;
}

/* BUG(mikol): env.dimensionsChanged() is called, but doesn’t have any effect
(in bespin 0.8.0 and 0.9a2) because when it is called, it A) checks that the old
canvas width and/or height have changed, B) stores the current canvas width and
height for future checks, then C) calls textView.invalidate() which eventually
checks that another rendering process isn’t already in flight before proceeding,
and finally D) text.invalidate() returns early beacuse there is another render
task in flight. Future calls to dimensionsChanged() have no effect because the
"old" canvans dimensions haven’t changed since they were stored in #B before the
render step that didn't actually happen. We can mitigate the impact of this bug
by setting the bespin element's overflow to hidden. */
.bespin {
  overflow: hidden !important;
}

.editor-doc {
  -webkit-box-sizing: border-box;
  background: transparent;
  background: rgba(255, 255, 100, .05);
  border: 0;
  border-right: solid 1px #ccc;
  bottom: 0;
  display: block;
  font-family: Consolas, monospace;
  font-size: 1em;
  height: 100%;
  line-height: 1.3em;
  margin: 0;
  outline: none;
  padding: 0;
  resize: none;
  width: 100%;
}

.editor-preview {
  -webkit-box-flex: 1;
  -webkit-box-sizing: border-box;
  border: 0;
  bottom: 0;
  height: 100%;
  left: 0;
  right: 0;
  top: 0;
  width: 100%;
}

.editor-preview-button {
  background: #eee;
  border: solid 1px #ccc;
  border-radius: 3px;
  font-family: Arial, sans-serif;
  font-size: 120%;
  padding: 0.25em 0.5em;
  position: absolute;
  right: 0;
  top: 0;
}

.editor-preview-button:hover {
  border-color: #aaa;
}

.editor-pane {
  bottom: 0;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
}

.editor-pane-left {
  right: 50%;
}

.editor-pane-right {
  left: 50%;
}

.editor-pane-top {
  top: 0;
}

.editor-deco {
  bottom: 0;
  left: 0;
  line-height: 1.3em;
  list-style: none;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  right: 0;
  top: 0;
}

.editor-deco-line {
  height: 1.3em;
}

.editor-deco-line-on {
  background: #ffe;
  border-top: solid 1px #eee;
  border-bottom: solid 1px #eee;
  margin: -1px 0;
}

#editor-load-template {
  margin-left: 8px;
  position: absolute;
  z-index: 9999;
}

.mine-body {
  background: #ccc;
}
.mine-body #save-content-form {
  display: none;
}
.mine-content {
  padding: 20px;
}
.mine-content ol {
  padding-left: 2em;
  list-style: square;
}
.mine-content li {
  margin-bottom: 1.3em;
}


.menu-button {
  margin: 0;
}
.menu-button-container {
  display: inline;
  position: relative;
}

.menu-button-container-on .menu-button-menu {
  visibility: visible;
}

.menu-button-menu {
  background: #eee;
  color: #000;
  border: solid 1px #ccc;
  padding: 0;
  position: absolute;
  visibility: hidden;
  width: 10em;
}
.menu-button-menu li {
  margin: 0;
  padding: 4px;
}
.menu-button-menu li:hover {
  background: #ccc;
  cursor: pointer;
}
